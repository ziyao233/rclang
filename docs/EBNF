EBNF grammar of rclang
Date: 2023.02.24
This document is in the public domain.

<type>			::= 'val' | 'ptr' | 'sal' | 'u8' | 's8' | 'u16' |
			    's16' | 'u32' | 's32' | 'u64' | 's64'

Expression

<value>			::= ['?'] <value> [':' <value>]
<or>			::= <and> ( '|' <and>)*
<and>			::= <not> ('&' <not>)*
<not>			::= ['!'] <equality>
<equality>		::= <relation> (('==' | '!=') <relation>)*
<relation>		::= <shift> (('>' | '<' | '>=' | '<=') <shift>)*
<shift>			::= <expr> (('<<' | '>>') <expr>)*
<expr>			::= <term> (('+' | '-') <term>)*
<term>			::= <factor> (('*' | '/' | '%') <factor>)*
<factor>		::= <address> | num | id | '(' <value> ')' |
			    <functioncall> | '$' <id> | '(' '-' <value> ')'
<address>		::= <type> '(' <value> ')' [ '[' <value> ']' ]
<functioncall>		::= <id> '(' <value>* ')'

Statements

<location>		::= <id> | <address>
<statement>		::= (('ret' value ';')		|
			     'break' ';'		|
			     <if>			|
			     <for>			|
			     <location> '=' <value> ';'	|
			     <functioncall> ';'		|
			     <vardefinition> ';'	|
			     <block>)
<block>			::= '{' <statement>* '}'
<if>			::= 'if' <value> <statement> |
			    ['else' <statement>]
<for>			::= 'for' <value> <statement>

Definition and Declaration

<svardefinition>	::= <type> (<id> ',')+ ';'
<vardefinition>		::= <type> (<id> ['=' <value>])+ ';'
<funcdefinition>	::= 'fn' <type> <id> '(' (<type> <id>)* ')' <block>
<funcdeclaration>	::= 'dcl' 'fn' <type> <id> '(' <type>* ')';
<vardeclaration>	::= 'dcl' <type> *<id> ',')+ ';'
<export>		::= 'export' (<id> ',') + ';'

<program>		::= (<funcdefinition>		|
			     <funcdeclaration>		|
			     <svardefinition>		|
			     <vardeclaration>		|
			     <export>)*
